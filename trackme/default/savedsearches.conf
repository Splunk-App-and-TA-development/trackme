# savedsearches.conf

# Monitoring of data sources

[TrackMe - Data sources abstract root tracker]
request.ui_dispatch_app = trackme
request.ui_dispatch_view = trackme
is_visible = false
search = | `tstats` max(_indextime) as current_data_last_ingest, min(_time) as current_data_first_time_seen, max(_time) as current_data_last_time_seen, count as current_data_eventcount where index=* sourcetype=* `trackme_tstats_main_filter` `trackme_get_idx_whitelist(trackme_data_source_monitoring_whitelist_index, data_index)` `apply_data_source_blacklists_data_retrieve` by index, sourcetype, host\
| eval current_data_last_ingestion_lag_seen=current_data_last_ingest-current_data_last_time_seen\
| stats max(current_data_last_ingest) as current_data_last_ingest, min(current_data_first_time_seen) as current_data_first_time_seen, max(current_data_last_time_seen) as current_data_last_time_seen, avg(current_data_last_ingestion_lag_seen) as current_data_last_ingestion_lag_seen, sum(current_data_eventcount) as current_data_eventcount by index, sourcetype\
| eval current_data_last_lag_seen=now()-current_data_last_time_seen, data_source_is_online="true"\
| rename index as data_index, sourcetype as data_sourcetype\
| append [ | inputlookup trackme_data_source_monitoring | eval key=_key | search `trackme_get_idx_whitelist_searchtime(trackme_data_source_monitoring_whitelist_index, data_index)`]\
| stats first(key) as _key, first(*) as "*" by data_index, data_sourcetype\
| eval data_last_lag_seen=if(isnotnull(current_data_last_lag_seen), current_data_last_lag_seen, data_last_lag_seen)\
| eval data_last_ingestion_lag_seen=if(isnotnull(current_data_last_ingestion_lag_seen), round(current_data_last_ingestion_lag_seen, 0), round(data_last_ingestion_lag_seen, 0))\
| eval data_first_time_seen=if(isnotnull(current_data_first_time_seen), current_data_first_time_seen, data_first_time_seen)\
| eval data_last_time_seen=if(isnotnull(current_data_last_time_seen), current_data_last_time_seen, data_last_time_seen)\
| eval data_last_ingest=if(isnotnull(current_data_last_ingest), current_data_last_ingest, data_last_ingest)\
| eval data_eventcount=if(isnotnull(current_data_eventcount), current_data_eventcount, data_eventcount)\
| fields - current_*\
| `trackme_default_monitored_state`\
| `trackme_default_lag`\
| `trackme_default_monitored_wdays`\
| `trackme_default_priority`\
| eval data_override_lagging_class=if(isnull(data_override_lagging_class) OR data_override_lagging_class="null", "false", data_override_lagging_class)\
| lookup trackme_custom_lagging_definition name as data_index OUTPUTNEW value as data_custom_max_lag_allowed\
| lookup trackme_custom_lagging_definition name as data_sourcetype OUTPUTNEW value as data_custom_max_lag_allowed\
| eval data_max_lag_allowed	=if(isnum(data_custom_max_lag_allowed) AND data_override_lagging_class!="true", data_custom_max_lag_allowed, data_max_lag_allowed)\
| eval data_name=if(isnull(data_name), data_index . ":" . data_sourcetype, data_name)\
| search NOT [ | inputlookup trackme_audit_changes | where action="success" AND change_type="delete permanent" | eval _time=time/1000 | where _time>relative_time(now(), "-7d") | table object | dedup object | sort limit=0 object | rename object as data_name ]\
| eval data_monitoring_level=if(isnull(data_monitoring_level), "sourcetype", data_monitoring_level)\
| eventstats max(data_last_time_seen) as data_last_time_seen_idx, min(data_last_lag_seen) as data_last_lag_seen_idx by data_index\
| `trackme_data_sources_filtering`\
| `trackme_eval_data_source_state` | eval data_tracker_runtime=now()\
| lookup local=t trackme_data_source_monitoring data_name OUTPUT data_source_state as data_previous_source_state, data_tracker_runtime as data_previous_tracker_runtime\
| append [ | inputlookup trackme_audit_flip | where object_category="data_source" | eval _time=time | stats max(_time) as current_latest_flip_time, latest(object_state) as current_latest_flip_state by object | rename object as data_name ]\
| stats first(_key) as _key, first(*) as "*" by data_name\
| eval latest_flip_time=if(isnotnull(current_latest_flip_time), current_latest_flip_time, latest_flip_time)\
| eval latest_flip_state=if(isnotnull(current_latest_flip_state), current_latest_flip_state, latest_flip_state)\
| fields - current_latest_flip_time, current_latest_flip_state\
| eval data_previous_source_state=if(isnull(data_previous_source_state), "discovered", data_previous_source_state)\
| where isnotnull(data_last_time_seen)\
| eval data_last_lag_seen=if(data_source_is_online="true", data_last_lag_seen, now()-data_last_time_seen)\
| eval data_monitored_state=if(data_last_time_seen<=`trackme_auto_disablement_period`, "disabled", data_monitored_state)\
| outputlookup trackme_data_source_monitoring append=t key_field=_key\
| lookup local=t trackme_data_source_monitoring data_name OUTPUT data_name as FOUND | where isnull(FOUND) | fields - FOUND\
| outputlookup trackme_data_source_monitoring append=t\
| stats count

[TrackMe - Data sources availability short term tracker]
cron_schedule = */5 * * * *
description = This scheduled report tracks and updates the data source availability KVstore based lookup
dispatch.earliest_time = -4h
dispatch.latest_time = +4h
enableSched = 1
request.ui_dispatch_app = trackme
request.ui_dispatch_view = trackme
search  = | savedsearch "TrackMe - Data sources abstract root tracker"

[TrackMe - Data sources availability long term tracker]
cron_schedule = 1 * * * *
description = This scheduled report tracks and updates the data source availability KVstore based lookup
dispatch.earliest_time = -7d
dispatch.latest_time = +4h
enableSched = 1
request.ui_dispatch_app = trackme
request.ui_dispatch_view = trackme
search  = | savedsearch "TrackMe - Data sources abstract root tracker"

[TrackMe - Alert on data source availability]
alert.digest_mode = 0
alert.severity = 4
alert.suppress = 1
alert.suppress.fields = data_name, data_index, data_sourcetype
alert.suppress.period = 24h
alert.track = 1
counttype = number of events
cron_schedule = */5 * * * *
description = This alert will trigger if one or more of the data hosts are detected as unavailable or not honouring SLA policies.
dispatch.earliest_time = -5m
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
display.visualizations.charting.chart = line
disabled = true
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = trackme
request.ui_dispatch_view = trackme
search = | inputlookup trackme_data_source_monitoring\
| appendcols [ | inputlookup trackme_maintenance_mode ] | filldown maintenance_mode | where NOT maintenance_mode="enabled"\
| where data_monitored_state="enabled" AND `trackme_alerts_priority`\
| `trackme_eval_data_source_state`\
| `apply_data_source_blacklists`\
| where data_source_state="red"\
| `trackme_date_format(data_last_ingest)`\
| `trackme_date_format(data_last_time_seen)`\
| `trackme_date_format(data_tracker_runtime)`\
| `trackme_date_format(data_previous_tracker_runtime)`\
| rename "* (translated)" as "*"\
| `trackme_get_identity_card(data_name)`\
| `trackme_ack_lookup(data_name, data_source)`

# Monitoring of hosts

#
# Host monitoring
#

[TrackMe - Data hosts abstract root tracker]
request.ui_dispatch_app = trackme
request.ui_dispatch_view = trackme
is_visible = false
search = | `tstats` max(_indextime) as data_last_ingest, min(_time) as data_first_time_seen, max(_time) as data_last_time_seen, count as data_eventcount where index=* sourcetype=* host=* host!="" `trackme_tstats_main_filter` `trackme_get_idx_whitelist(trackme_data_host_monitoring_whitelist_index, data_index)` `apply_data_host_blacklists_data_retrieve` by index, sourcetype, host\
`comment("#### tstats result table is loaded ####")`\
\
`comment("#### define a value for the last seen ingestion lag for that source ####")`\
| eval data_last_ingestion_lag_seen=data_last_ingest-data_last_time_seen\
\
`comment("#### lookup any defined rule for max lagging based on index or sourcetype ####")`\
| lookup trackme_custom_lagging_definition name as index OUTPUTNEW value as data_custom_max_lag_allowed_per_index\
| lookup trackme_custom_lagging_definition name as sourcetype OUTPUTNEW value as data_custom_max_lag_allowed_per_sourcetype\
\
`comment("#### for any match within the lagging policy, the highest lagging value has the precedence ####")`\
| eventstats max(data_custom_max_lag_allowed_per_index) as data_custom_max_lag_allowed_per_index, max(data_custom_max_lag_allowed_per_sourcetype) as data_custom_max_lag_allowed_per_sourcetype by host\
| eval data_custom_max_lag_allowed=case(\
isnum(data_custom_max_lag_allowed_per_index) AND isnum(data_custom_max_lag_allowed_per_sourcetype) AND data_custom_max_lag_allowed_per_index>data_custom_max_lag_allowed_per_sourcetype, data_custom_max_lag_allowed_per_index,\
isnum(data_custom_max_lag_allowed_per_index) AND isnum(data_custom_max_lag_allowed_per_sourcetype) AND data_custom_max_lag_allowed_per_sourcetype>data_custom_max_lag_allowed_per_index, data_custom_max_lag_allowed_per_sourcetype,\
isnum(data_custom_max_lag_allowed_per_index), data_custom_max_lag_allowed_per_index,\
isnum(data_custom_max_lag_allowed_per_sourcetype), data_custom_max_lag_allowed_per_sourcetype)\
| fields - data_custom_max_lag_allowed_per_index, data_custom_max_lag_allowed_per_sourcetype\
\
`comment("#### perform intermediate calculation table ####")`\
| stats max(data_last_ingest) as data_last_ingest, min(data_first_time_seen) as data_first_time_seen,\
max(data_last_time_seen) as data_last_time_seen, avg(data_last_ingestion_lag_seen) as data_last_ingestion_lag_seen,\
sum(data_eventcount) as data_eventcount, values(index) as index, values(sourcetype) as sourcetype, max(data_custom_max_lag_allowed) as data_custom_max_lag_allowed by host\
| eval data_last_ingestion_lag_seen=round(data_last_ingestion_lag_seen, 2)\
\
`comment("#### define the ingestion lag versus now, and a flag field defining an online status any results from live tstats ####")`\
| eval data_last_lag_seen=now()-data_last_time_seen, data_host_is_online="true"\
\
`comment("#### rename host and upper case ####")`\
| rename host as data_host | eval data_host=upper(data_host)\
\
 `comment("#### exclude any permanent deletion stored in the trackme_audit_change lookup ####")`\
| search NOT [ | inputlookup trackme_audit_changes | where action="success" AND change_type="delete permanent" | eval _time=time/1000 | where _time>relative_time(now(), "-7d") | table object | dedup object | sort limit=0 object | rename object as data_host ]\
\
`comment("#### generates a summary table for next phases ####")`\
| stats max(data_last_ingest) as data_last_ingest, min(data_first_time_seen) as current_data_first_time_seen, max(data_last_time_seen) as data_last_time_seen, min(data_last_lag_seen) as data_last_lag_seen, values(index) as data_index, values(sourcetype) as data_sourcetype, max(data_custom_max_lag_allowed) as data_custom_max_lag_allowed, max(data_last_ingestion_lag_seen) as data_last_ingestion_lag_seen, sum(data_eventcount) as data_eventcount by data_host\
\
`comment("#### lookup the collection to retrieve the KVstore key, data_first_time_seen field, and list of indexes / sourcetypes known for this source ####")`\
| lookup local=t trackme_host_monitoring data_host OUTPUT _key as key, data_first_time_seen, data_index as lookup_data_index, data_sourcetype as lookup_data_sourcetype, data_host_state as data_previous_host_state, data_tracker_runtime as data_previous_tracker_runtime\
\
`comment("#### if the key is null, this is the first time we see this source and it will be added to the collection, create a key ####")`\
| eval key=if(isnull(key), md5(data_host), key)\
\
`comment("#### data_first_time_seen needs to be preserved over iterations if the source is known already ####")`\
| eval data_first_time_seen=if(isnum(current_data_first_time_seen), current_data_first_time_seen, data_first_time_seen)\
\
`comment("#### apply various macro defining default values and policies ####")`\
| `trackme_default_host_monitored_state`\
| `trackme_default_host_lag`\
| `trackme_default_host_monitored_wdays`\
| `trackme_default_priority`\
\
`comment("#### if data_override_lagging_class is defined ####")`\
| eval data_override_lagging_class=if(isnull(data_override_lagging_class) OR data_override_lagging_class="null", "false", data_override_lagging_class)\
\
`comment("#### additional conditional operations on data_max_lag_allowed depending on policies ####")`\
| eval data_max_lag_allowed	=if(isnum(data_custom_max_lag_allowed) AND data_override_lagging_class!="true", data_custom_max_lag_allowed, data_max_lag_allowed)\
\
`comment("#### create a comma separated list of known indexes and sourcetype for live/lookup merge in next phase ####")`\
| eval data_index=mvjoin(data_index, ","), data_sourcetype=mvjoin(data_sourcetype, ",")\
\
`comment("#### merge ####")`\
| eval data_index=if(isnotnull(lookup_data_index), data_index . "," . lookup_data_index, data_index), data_sourcetype=if(isnotnull(lookup_data_sourcetype), data_sourcetype . "," . lookup_data_sourcetype, data_sourcetype)\
| fields - lookup_data_index, lookup_data_sourcetype\
\
`comment("#### transform in proper mvfield for dedup and sort purposes before making these again comma separated ####")`\
| makemv delim="," data_index\
| makemv delim="," data_sourcetype\
| eval data_index=mvdedup(data_index), data_sourcetype=mvdedup(data_sourcetype)\
| eval data_index=mvsort(data_index), data_sourcetype=mvsort(data_sourcetype)\
| eval data_index=mvjoin(data_index, ","), data_sourcetype=mvjoin(data_sourcetype, ",")\
\
`comment("#### apply default state ####")`\
| `trackme_eval_data_host_state`\
\
`comment("#### source group feature ####")`\
| `trackme_data_host_group_lookup`\
\
`comment("#### define data_tracker_runtime ####")`\
| eval data_tracker_runtime=now()\
\
`comment("#### append latest flipping states from audit ####")`\
| append [ | inputlookup trackme_audit_flip | where object_category="data_host" | eval _time=time | stats max(_time) as current_latest_flip_time, latest(object_state) as current_latest_flip_state by object | rename object as data_host ]\
| stats first(key) as key, first(*) as "*" by data_host\
\
`comment("#### define flip time and state ####")`\
| eval latest_flip_time=if(isnotnull(current_latest_flip_time), current_latest_flip_time, latest_flip_time)\
| eval latest_flip_state=if(isnotnull(current_latest_flip_state), current_latest_flip_state, latest_flip_state)\
| fields - current_latest_flip_time, current_latest_flip_state\
\
`comment("#### conditional verifications ####")`\
| eval data_previous_host_state=if(isnull(data_previous_host_state), "discovered", data_previous_host_state)\
| where isnotnull(data_last_time_seen)\
| eval data_last_lag_seen=if(data_host_is_online="true", data_last_lag_seen, now()-data_last_time_seen)\
\
`comment("#### apply host filtering ####")`\
| `trackme_data_host_rule_filter(data_host)`\
\
`comment("#### auto disable monitoring status based on policies ####")`\
| eval data_monitored_state=if(data_last_time_seen<=`trackme_auto_disablement_period`, "disabled", data_monitored_state)\
\
`comment("#### finally, after all this hard work, outputlookup to the KVstore collection ####")`\
| outputlookup trackme_host_monitoring append=t key_field=key\
\
`comment("#### avoid generating useless large artifact ####")`\
| stats count

[TrackMe - hosts availability short term tracker]
cron_schedule = */5 * * * *
description = This scheduled report tracks and updates the data source availability KVstore based lookup
dispatch.earliest_time = -4h
dispatch.latest_time = +4h
enableSched = 1
request.ui_dispatch_app = trackme
request.ui_dispatch_view = trackme
search  = | savedsearch "TrackMe - Data hosts abstract root tracker"

[TrackMe - hosts availability long term tracker]
cron_schedule = 1 * * * *
description = This scheduled report tracks and updates the data source availability KVstore based lookup
dispatch.earliest_time = -7d
dispatch.latest_time = +4h
enableSched = 1
request.ui_dispatch_app = trackme
request.ui_dispatch_view = trackme
search  = | savedsearch "TrackMe - Data hosts abstract root tracker"

[TrackMe - Alert on data host availability]
alert.digest_mode = 0
alert.severity = 4
alert.suppress = 1
alert.suppress.fields = data_host
alert.suppress.period = 24h
alert.track = 1
counttype = number of events
cron_schedule = */5 * * * *
description = This alert will trigger if one or more of the data hosts are detected as unavailable or not honouring SLA policies.
dispatch.earliest_time = -5m
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
display.visualizations.charting.chart = line
disabled = true
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = trackme
request.ui_dispatch_view = trackme
search = | inputlookup trackme_host_monitoring\
| appendcols [ | inputlookup trackme_maintenance_mode ] | filldown maintenance_mode | where NOT maintenance_mode="enabled"\
| where data_monitored_state="enabled" AND `trackme_alerts_priority`\
| `trackme_eval_data_host_state`\
| `apply_data_host_blacklists`\
| `trackme_data_host_group_lookup`\
| where data_host_state="red"\
| `trackme_date_format(data_last_ingest)`\
| `trackme_date_format(data_last_time_seen)`\
| `trackme_date_format(data_tracker_runtime)`\
| `trackme_date_format(data_previous_tracker_runtime)`\
| rename "* (translated)" as "*"\
| `trackme_ack_lookup(data_host, data_host)`

#
# Metric hosts monitoring
#

[TrackMe - metric hosts abstract root tracker]
request.ui_dispatch_app = trackme
request.ui_dispatch_view = trackme
is_visible = false
search = | mstats latest(_value) as value where index=* `trackme_mstats_main_filter` `trackme_get_idx_whitelist(trackme_metric_host_monitoring_whitelist_index, metric_index)` `apply_metric_host_blacklists_data_retrieve` host="$host$" by metric_name, index, host span=1s\
| stats max(_time) as _time by metric_name, index, host\
| rename host as metric_host, index as metric_index\
| `apply_metric_host_blacklists`\
| rex field=metric_name "(?<metric_category>[^\.]*)\.{0,1}"\
| `apply_metric_host_blacklists_metric_category`\
| stats max(_time) as _time by metric_category, metric_index, metric_host\
| eval metric_current_lag_sec=(now() - _time)\
| lookup trackme_metric_lagging_definition metric_category OUTPUT metric_max_lag_allowed\
| `trackme_default_metric_host_lag`\
| `trackme_eval_metric_host_state`\
| eval metric_details = "metric_category=" . metric_category . "|" . "metric_last_time=" . _time . "|" . "metric_max_lag_allowed=" . metric_max_lag_allowed . "|" . "metric_current_lag_sec=" . metric_current_lag_sec . "|" . "metric_host_state=" . metric_host_state . "|" . "metric_online=true"\
| stats max(_time) as _time, values(metric_index) as metric_index, values(metric_category) as metric_category, values(metric_details) as metric_details by metric_host\
| rename _time as metric_last_time_seen\
| eval metric_last_lag_seen=(now() - metric_last_time_seen)\
| eval metric_tracker_runtime=now()\
| append [ | inputlookup trackme_metric_host_monitoring | eval key=_key | makemv metric_category delim="," | makemv metric_index delim="," | makemv metric_details delim="," | search metric_host="$host$" ]\
| mvexpand metric_details\
| rex field=metric_details "metric_category=(?<detail_metric_category>[^\|]*)\|metric_last_time=(?<detail_metric_last_time>[^\|]*)\|metric_max_lag_allowed=(?<detail_metric_max_lag_allowed>[^\|]*)\|metric_current_lag_sec=(?<detail_metric_current_lag_sec>[^\|]*)\|metric_host_state=(?<detail_metric_host_state>[^\|]*)\|metric_online=(?<detail_metric_online>[^\|]*)"\
| rex field=metric_details "metric_category=(?<detail_metric_category>[^\|]*)\|metric_last_time=(?<detail_metric_last_time>[^\|]*)\|metric_max_lag_allowed=(?<detail_metric_max_lag_allowed>[^\|]*)\|metric_current_lag_sec=(?<detail_metric_current_lag_sec>[^\|]*)\|metric_host_state=(?<detail_metric_host_state>[^\|]*)"\
| lookup trackme_metric_lagging_definition metric_category as detail_metric_category OUTPUT metric_max_lag_allowed as sla_policy_detail_metric_max_lag_allowed\
| eval detail_metric_max_lag_allowed=if(isnum(sla_policy_detail_metric_max_lag_allowed), sla_policy_detail_metric_max_lag_allowed, detail_metric_max_lag_allowed)\
| `trackme_eval_metric_category_state`\
| fields - sla_policy_detail_metric_max_lag_allowed\
| eval _time=metric_tracker_runtime\
| eventstats latest(detail_metric_last_time) as detail_metric_last_time,  latest(detail_metric_current_lag_sec) as detail_metric_current_lag_sec, latest(detail_metric_max_lag_allowed) as detail_metric_max_lag_allowed, latest(detail_metric_host_state) as detail_metric_host_state, first(detail_metric_online) as detail_metric_online by metric_host, detail_metric_category\
| eval detail_metric_current_lag_sec=if(detail_metric_online="true", detail_metric_current_lag_sec, now()-detail_metric_last_time)\
| `trackme_eval_metric_category_state`\
| `trackme_date_format(detail_metric_last_time)`\
| eval metric_details = "metric_category=" . detail_metric_category . "|" . "metric_last_time=" . detail_metric_last_time . "|" . "metric_max_lag_allowed=" . detail_metric_max_lag_allowed . "|" . "metric_current_lag_sec=" . detail_metric_current_lag_sec . "|" . "metric_host_state=" . detail_metric_host_state\
| eval metric_details_human  = "metric_category=" . detail_metric_category . "|" . "metric_last_time=" . 'detail_metric_last_time (translated)' . "|" . "metric_current_lag_sec=" . detail_metric_current_lag_sec . "|" . "metric_host_state=" . detail_metric_host_state\
| `apply_metric_host_blacklists`\
| `apply_metric_host_blacklists_detail_metric_category`\
| stats first(key) as key, min(metric_first_time_seen) as metric_first_time_seen, max(metric_last_time_seen) as metric_last_time_seen, values(metric_index) as metric_index, values(metric_category) as metric_category, values(metric_details) as metric_details, values(metric_details_human) as metric_details_human, latest(metric_last_lag_seen) as metric_last_lag_seen, max(metric_tracker_runtime) as metric_tracker_runtime, first(metric_monitoring_wdays) as metric_monitoring_wdays, first(metric_monitored_state) as metric_monitored_state, first(priority) as priority by metric_host\
| eval metric_first_time_seen=if(isnull(metric_first_time_seen), metric_last_time_seen, metric_first_time_seen)\
| lookup trackme_metric_host_monitoring metric_host OUTPUTNEW _key as key\
| rename key as _key\
| `trackme_eval_metric_host_state`\
| `trackme_default_priority`\
| search `trackme_get_idx_whitelist_searchtime(trackme_metric_host_monitoring_whitelist_index, metric_index)`\
| lookup local=t trackme_metric_host_monitoring metric_host OUTPUT metric_host_state as metric_previous_host_state, metric_tracker_runtime as metric_previous_tracker_runtime\
| append [ | inputlookup trackme_audit_flip | where object_category="metric_host" | eval _time=time | stats max(_time) as current_latest_flip_time, latest(object_state) as current_latest_flip_state by object | rename object as metric_host ]\
| stats first(_key) as keyid, first(latest_flip_time) as latest_flip_time, first(latest_flip_state) as latest_flip_state, first(current_latest_flip_time) as current_latest_flip_time, first(current_latest_flip_state) as current_latest_flip_state, values(*) as "*" by metric_host\
| eval latest_flip_time=if(isnotnull(current_latest_flip_time), current_latest_flip_time, latest_flip_time)\
| eval latest_flip_state=if(isnotnull(current_latest_flip_state), current_latest_flip_state, latest_flip_state)\
| fields - current_latest_flip_time, current_latest_flip_state\
| eval metric_previous_host_state=if(isnull(metric_previous_host_state), "discovered", metric_previous_host_state)\
| where isnotnull(metric_category)\
| `trackme_default_metric_host_monitored_state`

[TrackMe - metric hosts collection based table report]
request.ui_dispatch_app = trackme
request.ui_dispatch_view = trackme
is_visible = false
search = | inputlookup trackme_metric_host_monitoring\
| eval keyid=_key\
| `apply_metric_host_blacklists`\
| eval metric_index_raw=metric_index, metric_category_raw=metric_category, metric_details_raw=metric_details\
| makemv delim="," metric_index\
| makemv delim="," metric_category\
| makemv delim="," metric_details\
| mvexpand metric_details\
| rex field=metric_details "metric_category=(?<detail_metric_category>[^\|]*)\|metric_last_time=(?<detail_metric_last_time>[^\|]*)\|metric_max_lag_allowed=(?<detail_metric_max_lag_allowed>[^\|]*)\|metric_current_lag_sec=(?<detail_metric_current_lag_sec>[^\|]*)\|metric_host_state=(?<detail_metric_host_state>[^\|]*)"\
| `trackme_date_format(detail_metric_last_time)`\
| eval metric_details_human  = "metric_category=" . detail_metric_category . "|" . "metric_last_time=" . 'detail_metric_last_time (translated)' . "|" . "metric_current_lag_sec=" . detail_metric_current_lag_sec . "|" . "metric_host_state=" . detail_metric_host_state\
| fields - detail_*\
| stats values(*) as "*" by keyid

[TrackMe - metric hosts availability tracker]
cron_schedule = */5 * * * *
description = This scheduled report tracks and updates the metric hosts availability KVstore based lookup
dispatch.earliest_time = -5m
dispatch.latest_time = now
enableSched = 1
request.ui_dispatch_app = trackme
request.ui_dispatch_view = trackme
search = | savedsearch "TrackMe - metric hosts abstract root tracker" host=*\
| rename keyid as _key\
| eval metric_category=mvjoin(metric_category, ","), metric_index=mvjoin(metric_index, ","), metric_details=mvjoin(metric_details, ",")\
| search NOT [ | inputlookup trackme_audit_changes | where action="success" AND change_type="delete permanent" AND object_category="metric_host" | eval _time=time/1000 | where _time>relative_time(now(), "-7d") | table object | dedup object | sort limit=0 object | rename object as metric_host ]\
| `trackme_metric_host_group_lookup`\
| eval metric_monitored_state=if(metric_last_time_seen<=`trackme_auto_disablement_period`, "disabled", metric_monitored_state)\
| outputlookup trackme_metric_host_monitoring append=t key_field=_key\
| lookup local=t trackme_metric_host_monitoring metric_host OUTPUT metric_host as FOUND | where isnull(FOUND) | fields - FOUND\
| outputlookup trackme_metric_host_monitoring append=t\
| stats count

[trackMe - metric host table report]
dispatch.earliest_time = -5m
dispatch.latest_time = now
is_visible = false
search = | savedsearch "TrackMe - metric hosts abstract root tracker" host=*\
| eval metric_host_state=if(match(metric_details, "metric_host_state=red"), "red", "green")\
| `trackme_metric_host_group_lookup`\
| `trackme_date_format(metric_last_time_seen)` | rename "metric_last_time_seen (translated)" as "last time"

[trackMe - metric host live report]
dispatch.earliest_time = -5m
dispatch.latest_time = now
is_visible = false
search = | mstats latest(_value) as value where index=* metric_name="*" host="$host$" by metric_name, index, host span=1s\
| stats max(_time) as _time by metric_name, index, host\
| rex field=metric_name "(?<metric_category>[^\.]*)\.{0,1}"\
| stats values(metric_name) as metric_name, max(_time) as _time by metric_category, index, host\
| eval metric_current_lag_sec=(now() - _time)\
| lookup trackme_metric_lagging_definition metric_category OUTPUT metric_max_lag_allowed\
| eval metric_max_lag_allowed=if(isnull(metric_max_lag_allowed), "300", metric_max_lag_allowed)\
| eval metric_host_state=if(match(metric_details, "metric_host_state=red"), "red", "green")\
| stats max(_time) as "metric_last_time_seen", first(metric_max_lag_allowed) as metric_max_lag_allowed, values(index) as index, values(metric_name) as metric_name, first(metric_host_state) as metric_host_state by metric_category\
| `trackme_date_format(metric_last_time_seen)` | fields - metric_last_time_seen | rename "metric_last_time_seen (translated)" as metric_last_time_seen\
| fields index, metric_category, metric_name, metric_last_time_seen, metric_host_state

[trackMe - metric per host table report]
dispatch.earliest_time = -5m
dispatch.latest_time = now
is_visible = false
search = | savedsearch "TrackMe - metric hosts abstract root tracker" host="$host$"\
| fields metric_details_human\
| mvexpand metric_details_human\
| rex field=metric_details_human "metric_category=(?<metric_category>[^\|]*)\|metric_last_time=(?<metric_last_time>[^\|]*)\|metric_current_lag_sec=(?<metric_current_lag_sec>[^\|]*)\|metric_host_state=(?<metric_host_state>\w*)"\
| lookup trackme_metric_lagging_definition metric_category OUTPUT metric_max_lag_allowed\
| `trackme_default_metric_host_lag`\
| `trackme_eval_icons_metric_host_state_only`\
| fields metric_category metric_last_time metric_max_lag_allowed metric_current_lag_sec state metric_host_state

[TrackMe - Alert on metric host availability]
alert.digest_mode = 0
alert.severity = 4
alert.suppress = 1
alert.suppress.fields = metric_host
alert.suppress.period = 24h
alert.track = 1
counttype = number of events
cron_schedule = */5 * * * *
description = This alert will trigger if one or more of the metric hosts are detected in red mode, which one or more monitored metric unavailable of not honouring SLA policies.
dispatch.earliest_time = -5m
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
display.visualizations.charting.chart = line
disabled = true
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = trackme
request.ui_dispatch_view = trackme
search = | inputlookup trackme_metric_host_monitoring\
| `apply_metric_host_blacklists`\
| appendcols [ | inputlookup trackme_maintenance_mode ] | filldown maintenance_mode | where NOT maintenance_mode="enabled"\
| where metric_monitored_state="enabled" AND `trackme_alerts_priority`\
| where metric_host_state="red"\
| `trackme_date_format(metric_last_time_seen)`\
| `trackme_date_format(metric_tracker_runtime)`\
| `trackme_date_format(metric_previous_tracker_runtime)`\
| rename "* (translated)" as "*"\
| makemv metric_category delim=","\
| makemv metric_details delim=","\
| `trackme_ack_lookup(metric_host, metric_host)`

# Various

[TrackMe - Audit changes night purge]
cron_schedule = 30 3 * * *
description = This scheduled report purges old entries from the audit changes collection
dispatch.earliest_time = -5m
dispatch.latest_time = now
enableSched = 1
request.ui_dispatch_app = trackme
request.ui_dispatch_view = trackme
search  = | inputlookup trackme_audit_changes | sort limit=0 - time | eval _time=time/1000\
| `trackme_audit_changes_retention`\
| outputlookup trackme_audit_changes\
| stats count

[TrackMe - Flip state night purge]
cron_schedule = 0 4 * * *
description = This scheduled report purges old entries from the flip state collection
dispatch.earliest_time = -5m
dispatch.latest_time = now
enableSched = 1
request.ui_dispatch_app = trackme
request.ui_dispatch_view = trackme
search  = | inputlookup trackme_audit_flip | sort limit=0 - time | eval _time=time\
| `trackme_flip_state_retention`\
| outputlookup trackme_audit_flip\
| stats count

# Track flip state

[TrackMe - Flip state change tracker]
cron_schedule = 1-56/5 * * * *
description = This scheduled report tracks and updates the flip state KVstore based lookup
dispatch.earliest_time = -5m
dispatch.latest_time = now
enableSched = 1
request.ui_dispatch_app = trackme
request.ui_dispatch_view = trackme
search  = | inputlookup trackme_data_source_monitoring\
| inputlookup append=t trackme_host_monitoring\
| inputlookup append=t trackme_metric_host_monitoring\
| where (data_monitored_state="enabled" OR metric_monitored_state="enabled")\
| where (data_source_state!=data_previous_source_state) OR (data_host_state!=data_previous_host_state) OR (metric_host_state!=metric_previous_host_state)\
| eval time=case(isnotnull(data_tracker_runtime), data_tracker_runtime, isnotnull(metric_tracker_runtime), metric_tracker_runtime)\
| eval tracker_runtime=case(isnotnull(data_tracker_runtime), strftime(data_tracker_runtime, "%d/%m/%Y %H:%M:%S"), isnotnull(metric_tracker_runtime), strftime(metric_tracker_runtime, "%d/%m/%Y %H:%M:%S"))\
| eval object=case(isnotnull(data_name), data_name, isnotnull(data_host), data_host, isnotnull(metric_host), metric_host)\
| eval object_category=case(isnotnull(data_name), "data_source", isnotnull(data_host), "data_host", isnotnull(metric_host), "metric_host")\
| eval object_previous_state=case(isnotnull(data_previous_source_state), data_previous_source_state, isnotnull(data_previous_host_state), data_previous_host_state, isnotnull(metric_previous_host_state), metric_previous_host_state)\
| eval object_state=case(isnotnull(data_source_state), data_source_state, isnotnull(data_host_state), data_host_state, isnotnull(metric_host_state), metric_host_state)\
| eval result = tracker_runtime . ", object=" . object . " has flipped from previous_state=" . object_previous_state . " to state=" . object_state\
| table time, object, object_category, result, object_previous_state, object_state\
| lookup trackme_audit_flip time, object, object_category OUTPUT result as FOUND | where isnull(FOUND) | fields - FOUND\
| outputlookup trackme_audit_flip append=t\
| stats count

# Ack trackers

[TrackMe - Ack tracker]
cron_schedule = 1-56/5 * * * *
description = This scheduled report tracks and updates the Ack KVstore based lookup
dispatch.earliest_time = -5m
dispatch.latest_time = now
enableSched = 1
request.ui_dispatch_app = trackme
request.ui_dispatch_view = trackme
search = | inputlookup trackme_alerts_ack | eval keyid=_key\
| eval limit_expiration=ack_expiration-300\
| eval ack_state=if(now()>=limit_expiration, "inactive", ack_state)\
| lookup trackme_data_source_monitoring data_name as object OUTPUTNEW data_source_state as object_current_state\
| lookup trackme_host_monitoring data_host as object OUTPUTNEW data_host_state as object_current_state\
| lookup trackme_metric_host_monitoring metric_host as object OUTPUTNEW metric_host_state as object_current_state\
| eval ack_state=if(object_current_state="green", "inactive", ack_state)\
| eval ack_expiration=if(ack_state="inactive", "N/A", ack_expiration), ack_mtime=if(ack_state="inactive", "N/A", ack_mtime) | fields keyid, *\
| outputlookup append=t trackme_alerts_ack key_field=keyid\
| stats c

# TrackMe audit change notification tracker
# The purpose of this alert is to provide a notification flow for online team working, such as sharing in a Slack channel when modifications are
# performed by administrators.

[TrackMe - Audit change notification tracker]
alert.digest_mode = 0
alert.severity = 1
alert.suppress = 1
alert.suppress.fields = _time, user, change_type, object_category, object
alert.suppress.period = 24h
alert.track = 1
counttype = number of events
cron_schedule = */5 * * * *
description = This alert can be activated and used to share with other administrators any change that is operated within the application
dispatch.earliest_time = -15m
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
display.visualizations.charting.chart = line
disabled = true
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = trackme
request.ui_dispatch_view = trackme
search = | inputlookup trackme_audit_changes\
| sort limit=0 - time\
| eval _time=time/1000 | eval time=strftime(_time, "%c") | addinfo | where _time>=info_min_time AND (_time<=info_max_time OR info_max_time="+Infinity")\
| table _time, time, user, action, change_type, object_category, object, object_attrs, comment | fillnull value="N/A"

# trackme get table

[trackme_get_data_source_table_by_key]
request.ui_dispatch_app = trackme
request.ui_dispatch_view = trackme
is_visible = false
search = | inputlookup trackme_data_source_monitoring where _key=$key$\
| eval keyid=_key\
| `trackme_eval_data_source_state`\
| `trackme_default_priority`\
| `trackme_date_format(data_last_time_seen)`\
| `trackme_date_format(data_last_time_seen_idx)`\
| `trackme_date_format(data_last_ingest)`\
| fillnull value="red" data_source_state\
| fillnull data_last_lag_seen, data_last_ingestion_lag_seen\
| eval "lag summary (lag event / lag ingestion)" = data_last_lag_seen . " sec / " . data_last_ingestion_lag_seen . " sec"\
| rename "data_last_time_seen (translated)" as "last time", "data_last_ingest (translated)" as "last ingest", "data_last_time_seen_idx (translated)" as "last time idx"\
| lookup local=t trackme_data_source_monitoring data_name OUTPUT data_source_state as data_previous_source_state, data_tracker_runtime as data_previous_tracker_runtime, latest_flip_state, latest_flip_time\
| `trackme_date_format("latest_flip_time")`\
| fillnull value="N/A" latest_flip_state, latest_flip_time, "latest_flip_time (translated)"

[trackme_get_data_host_table_by_key]
request.ui_dispatch_app = trackme
request.ui_dispatch_view = trackme
is_visible = false
search = | inputlookup trackme_host_monitoring where _key=$key$\
| eval keyid=_key\
| eval data_index_raw=data_index, data_sourcetype_raw=data_sourcetype\
| makemv delim="," data_index\
| makemv delim="," data_sourcetype\
| `trackme_eval_data_host_state`\
| `trackme_default_priority`\
| `trackme_data_host_group_lookup`\
| `trackme_date_format(data_last_time_seen)`\
| `trackme_date_format(data_last_time_seen_idx)`\
| `trackme_date_format(data_last_ingest)`\
| rename "data_last_ingest (translated)" as "last ingest", "data_last_time_seen (translated)" as "last time"\
| lookup local=t trackme_host_monitoring data_host OUTPUT data_host_state as data_previous_host_state, data_tracker_runtime as data_previous_tracker_runtime, latest_flip_state, latest_flip_time\
| `trackme_date_format("latest_flip_time")`\
| fillnull value="N/A" latest_flip_state, latest_flip_time, "latest_flip_time (translated)"\
| fillnull data_last_lag_seen, data_last_ingestion_lag_seen | eval "lag summary (lag event / lag ingestion)" = data_last_lag_seen . " sec / " . data_last_ingestion_lag_seen . " sec"

[trackme_get_metric_host_table_by_key]
request.ui_dispatch_app = trackme
request.ui_dispatch_view = trackme
is_visible = false
search = | savedsearch "TrackMe - metric hosts collection based table report" | where keyid="$key$"\
| `trackme_date_format("metric_last_time_seen")`\
| rename "metric_last_time_seen (translated)" as "last time"\
| `trackme_eval_metric_host_state`\
| `trackme_metric_host_group_lookup`\
|`trackme_eval_icons_metric_host`\
|`trackme_date_format("latest_flip_time")`\
| fillnull value="N/A" latest_flip_state, latest_flip_time, "latest_flip_time (translated)"

[Verify trackMe alerting maintenance status]
cron_schedule = */5 * * * *
description = This scheduled report verifies the default maintenance status, if no status is set, it will be disabled by default
dispatch.earliest_time = -5m
dispatch.latest_time = now
enableSched = 1
request.ui_dispatch_app = trackme
request.ui_dispatch_view = search
schedule_window = 5
run_on_startup = true
search  = | makeresults\
| appendcols [ | inputlookup trackme_maintenance_mode ]\
| eval maintenance_mode=if(isnull(maintenance_mode), "disabled", maintenance_mode), time_updated=if(isnull(time_updated), now(), time_updated)\
| eval maintenance_mode=if(isnotnull(maintenance_mode_end) AND maintenance_mode_end<now(), "disabled", maintenance_mode)\
| eval maintenance_mode=if(isnotnull(maintenance_mode_start) AND isnotnull(maintenance_mode_end) AND now()>=maintenance_mode_start AND maintenance_mode_end>now(), "enabled", maintenance_mode)\
| eval maintenance_mode_start=if(isnotnull(maintenance_mode_end) AND maintenance_mode_end<now(), "", maintenance_mode_start), maintenance_mode_end=if(isnotnull(maintenance_mode_end) AND maintenance_mode_end<now(), "", maintenance_mode_end)\
| eval time_updated=if(maintenance_mode="enabled" AND isnotnull(maintenance_mode_end) AND maintenance_mode_end<now(), now, time_updated)\
| eval time_updated=if(maintenance_mode="enabled" AND isnotnull(maintenance_mode_start) AND isnotnull(maintenance_mode_end) AND now()>=maintenance_mode_start AND maintenance_mode_end<now(), now, time_updated)\
| fields - time | table maintenance_mode, maintenance_mode_start, maintenance_mode_end, time_updated | outputlookup trackme_maintenance_mode
